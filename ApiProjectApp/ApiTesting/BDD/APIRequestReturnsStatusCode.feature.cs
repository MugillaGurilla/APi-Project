// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApiTesting.BDD
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("APIRequestReturnsStatusCode")]
    public partial class APIRequestReturnsStatusCodeFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "APIRequestReturnsStatusCode.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD", "APIRequestReturnsStatusCode", "When the user enters an API request, a status code is returned  in the JSON heade" +
                    "rs", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("that I have initialised a DnD 5E API service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("If I make a valid API request, then status code 200 is returned")]
        [NUnit.Framework.CategoryAttribute("Happy")]
        [NUnit.Framework.TestCaseAttribute("monsters", "adult-black-dragon", null)]
        [NUnit.Framework.TestCaseAttribute("monsters", "flesh-golem", null)]
        [NUnit.Framework.TestCaseAttribute("monsters", "ettin", null)]
        [NUnit.Framework.TestCaseAttribute("spells", "?name=fireball", null)]
        [NUnit.Framework.TestCaseAttribute("spells", "?name=blight", null)]
        [NUnit.Framework.TestCaseAttribute("spells", "?name=heat-metal", null)]
        [NUnit.Framework.TestCaseAttribute("classes", "paladin", null)]
        [NUnit.Framework.TestCaseAttribute("classes", "wizard", null)]
        [NUnit.Framework.TestCaseAttribute("classes", "cleric", null)]
        public void IfIMakeAValidAPIRequestThenStatusCode200IsReturned(string section, string subsection, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Happy"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("section", section);
            argumentsOfScenario.Add("subsection", subsection);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("If I make a valid API request, then status code 200 is returned", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 11
 testRunner.When(string.Format("I execute the request with {0}, {1}", section, subsection), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
 testRunner.Then("status code 200 should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("If I make an invalid API request, then status code should be 404")]
        [NUnit.Framework.CategoryAttribute("Sad")]
        [NUnit.Framework.TestCaseAttribute("monsters", "JoeMcCann", null)]
        [NUnit.Framework.TestCaseAttribute("monsters", "Cormac", null)]
        [NUnit.Framework.TestCaseAttribute("monsters", "Lucas", null)]
        [NUnit.Framework.TestCaseAttribute("classes", "test-engineer", null)]
        [NUnit.Framework.TestCaseAttribute("classes", "dev-ops", null)]
        [NUnit.Framework.TestCaseAttribute("classes", "developer", null)]
        public void IfIMakeAnInvalidAPIRequestThenStatusCodeShouldBe404(string section, string subsection, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Sad"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("section", section);
            argumentsOfScenario.Add("subsection", subsection);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("If I make an invalid API request, then status code should be 404", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 28
 testRunner.When(string.Format("I execute the request with {0}, {1}", section, subsection), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
 testRunner.Then("status code 404 should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("If I make an invalid API request then an error message should be returned")]
        [NUnit.Framework.CategoryAttribute("Sad")]
        [NUnit.Framework.TestCaseAttribute("monsters", "JoeMcCann", null)]
        [NUnit.Framework.TestCaseAttribute("monsters", "Cormac", null)]
        [NUnit.Framework.TestCaseAttribute("monsters", "Lucas", null)]
        public void IfIMakeAnInvalidAPIRequestThenAnErrorMessageShouldBeReturned(string section, string subsection, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Sad"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("section", section);
            argumentsOfScenario.Add("subsection", subsection);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("If I make an invalid API request then an error message should be returned", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 42
    testRunner.When(string.Format("I execute the request with {0}, {1}", section, subsection), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
    testRunner.Then("an error not found should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
